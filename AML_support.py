"""support functions for "Applied Machine Learning"version 2024-04-04provides:    scatter(data)  ... 2D, 3D    correlogram(data)    parallel_coord(data, labels=None)    silhouette_plot(data, labels)    biplot(data, scale=False) : pca(2)"""#%% required packagesimport numpy as npimport matplotlib.pyplot as pltfrom sklearn.decomposition import PCAimport sklearn.preprocessing as prepfrom sklearn.metrics import silhouette_samples#%% internal support def _getnames(data):    if hasattr(data, 'columns'):        features = data.columns    else:        features = [ f'x{i}' for i in range(data.shape[-1]) ]    return features#%% def scatter(data, labels=None, aspect=False):    if not labels is None:        labenc = prep.LabelEncoder()        labels = labenc.fit_transform(labels)        X = np.array(data)    fig = plt.figure()    D = X.shape[-1]    features = _getnames(data)        if D==2:        plt.scatter(X[:,0], X[:,1], c=labels)    else:        ax = fig.add_subplot(projection='3d')        ax.scatter(X[:,0], X[:,1], X[:,2], c=labels)        ax.set_zlabel(features[2], fontweight='bold', size=14)    if aspect:        plt.gca().set_aspect('equal')    plt.xlabel(features[0], fontweight='bold', size=14)    plt.ylabel(features[1], fontweight='bold', size=14)    plt.grid()    plt.show()#%% def correlogram(data):    N = data.shape[1]    if hasattr(data, 'columns'):        features = list(data.columns)    else:        features = [f'x_{i}' for i in range(N)]    C = np.corrcoef(data.T)        _ = plt.figure(figsize=(N+3, N+3))    plt.imshow(C,vmin=-1, vmax=1, cmap='RdBu_r')    for i in range(N):        for j in range(N):            rho = C[i,j].round(2)            c = 'w' if abs(rho) > 0.6 else 'k'            plt.text(i,j, rho,                     horizontalalignment='center',                     color=c)    plt.colorbar()    plt.xticks(np.arange(N), features)    plt.yticks(np.arange(N), features)    plt.title('correlation coefficients', size=20)#%%def parallel_coord(data,labels=None):    plt.figure()    if labels is None:        plt.plot(data.T, 'k', alpha=.2)    else:        clusters = np.unique(labels)        for i, l in enumerate(clusters):            color = plt.cm.gist_rainbow( i / len(clusters), alpha=.2 )            _ = plt.plot(data[l==labels].T, color=color)#%%def silhouette_plot(data,labels):    sil_values = silhouette_samples(data, labels)    clusters = np.unique(labels)    y_upper = 10*len(clusters) + len(data)    plt.figure()    for l in clusters:        sil_val_cluster = sil_values[labels == l]        sil_val_cluster.sort()        size_cluster = len( sil_val_cluster )        y_lower = y_upper - size_cluster        color = plt.cm.gist_rainbow( float(l) / len(clusters) )        plt.fill_betweenx(np.arange(y_lower, y_upper),                          0, sil_val_cluster,                          facecolor=color, edgecolor=color)        plt.text(-0.05, y_lower + 0.5 * size_cluster, str(l))        y_upper = y_lower - 10      sil_avg = sil_values.mean()    plt.title(f' Average Silhouette Score: {sil_avg}')    plt.xlabel("Silhouette coefficient values")    plt.ylabel("Cluster")    plt.axvline(x=sil_avg, color="blue", linestyle=":")    plt.yticks([])    plt.xticks([-0.2, 0, 0.2, 0.4, 0.6, 0.8, 1])    plt.grid()    plt.show()#%% def biplot(data, labels=None):    pca = PCA(n_components=2)    pca.fit(data)    X = pca.fit_transform(data)        if labels is None:        labels = 'k'    else:        labenc = prep.LabelEncoder()        labels = labenc.fit_transform(labels)    coeff = pca.components_*X.std()    features = _getnames(data)            fig = plt.figure()    fig.clf()    plt.scatter(*(X.T),c=labels)    for i,feature in enumerate(features):        plt.arrow(0,0, *(coeff[:,i]),                   color='b',                   linewidth=2,head_width=.1)        plt.text(*(1.2*coeff[:,i]), feature,                 size=15, color='b')        plt.gca().set_aspect(1)    plt.grid()    plt.show()    return pca